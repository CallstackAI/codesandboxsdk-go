// Package csbsetup provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package csbsetup

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// Defines values for SetupProgressState.
const (
	FINISHED   SetupProgressState = "FINISHED"
	IDLE       SetupProgressState = "IDLE"
	INPROGRESS SetupProgressState = "IN_PROGRESS"
	STOPPED    SetupProgressState = "STOPPED"
)

// Defines values for SetupShellStatus.
const (
	FAILED    SetupShellStatus = "FAILED"
	SKIPPED   SetupShellStatus = "SKIPPED"
	SUCCEEDED SetupShellStatus = "SUCCEEDED"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error details
	Error map[string]interface{} `json:"error"`

	// Status Status code for error operations
	Status float32 `json:"status"`
}

// ProtocolError defines model for ProtocolError.
type ProtocolError struct {
	// Code Error code
	Code float32 `json:"code"`

	// Data Additional error data
	Data *map[string]interface{} `json:"data"`

	// Message Error message
	Message string `json:"message"`
}

// SetupProgress defines model for SetupProgress.
type SetupProgress struct {
	// CurrentStepIndex Index of the current step being executed
	CurrentStepIndex float32 `json:"currentStepIndex"`

	// State Current state of the setup process
	State SetupProgressState `json:"state"`

	// Steps List of setup steps
	Steps []Step `json:"steps"`
}

// SetupProgressState Current state of the setup process
type SetupProgressState string

// SetupShellStatus Status of a setup shell step
type SetupShellStatus string

// Step defines model for Step.
type Step struct {
	// Command Command to execute for this step
	Command string `json:"command"`

	// FinishStatus Status of a setup shell step
	FinishStatus SetupShellStatus `json:"finishStatus"`

	// Name Name of the setup step
	Name string `json:"name"`

	// ShellId ID of the shell executing the command
	ShellId *string `json:"shellId"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	// Result Result payload for the operation
	Result map[string]interface{} `json:"result"`

	// Status Status code for successful operations
	Status float32 `json:"status"`
}

// SetupDisableJSONBody defines parameters for SetupDisable.
type SetupDisableJSONBody = map[string]interface{}

// SetupEnableJSONBody defines parameters for SetupEnable.
type SetupEnableJSONBody = map[string]interface{}

// SetupGetJSONBody defines parameters for SetupGet.
type SetupGetJSONBody = map[string]interface{}

// SetupInitJSONBody defines parameters for SetupInit.
type SetupInitJSONBody = map[string]interface{}

// SetupSetStepJSONBody defines parameters for SetupSetStep.
type SetupSetStepJSONBody struct {
	// StepIndex Index of the step to set as current
	StepIndex float32 `json:"stepIndex"`
}

// SetupSkipStepJSONBody defines parameters for SetupSkipStep.
type SetupSkipStepJSONBody struct {
	// StepIndexToSkip Index of the step to skip
	StepIndexToSkip float32 `json:"stepIndexToSkip"`
}

// SetupSkipAllJSONBody defines parameters for SetupSkipAll.
type SetupSkipAllJSONBody = map[string]interface{}

// SetupDisableJSONRequestBody defines body for SetupDisable for application/json ContentType.
type SetupDisableJSONRequestBody = SetupDisableJSONBody

// SetupEnableJSONRequestBody defines body for SetupEnable for application/json ContentType.
type SetupEnableJSONRequestBody = SetupEnableJSONBody

// SetupGetJSONRequestBody defines body for SetupGet for application/json ContentType.
type SetupGetJSONRequestBody = SetupGetJSONBody

// SetupInitJSONRequestBody defines body for SetupInit for application/json ContentType.
type SetupInitJSONRequestBody = SetupInitJSONBody

// SetupSetStepJSONRequestBody defines body for SetupSetStep for application/json ContentType.
type SetupSetStepJSONRequestBody SetupSetStepJSONBody

// SetupSkipStepJSONRequestBody defines body for SetupSkipStep for application/json ContentType.
type SetupSkipStepJSONRequestBody SetupSkipStepJSONBody

// SetupSkipAllJSONRequestBody defines body for SetupSkipAll for application/json ContentType.
type SetupSkipAllJSONRequestBody = SetupSkipAllJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// SetupDisableWithBody request with any body
	SetupDisableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetupDisable(ctx context.Context, body SetupDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetupEnableWithBody request with any body
	SetupEnableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetupEnable(ctx context.Context, body SetupEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetupGetWithBody request with any body
	SetupGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetupGet(ctx context.Context, body SetupGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetupInitWithBody request with any body
	SetupInitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetupInit(ctx context.Context, body SetupInitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetupSetStepWithBody request with any body
	SetupSetStepWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetupSetStep(ctx context.Context, body SetupSetStepJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetupSkipStepWithBody request with any body
	SetupSkipStepWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetupSkipStep(ctx context.Context, body SetupSkipStepJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetupSkipAllWithBody request with any body
	SetupSkipAllWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetupSkipAll(ctx context.Context, body SetupSkipAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) SetupDisableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupDisableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupDisable(ctx context.Context, body SetupDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupDisableRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupEnableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupEnableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupEnable(ctx context.Context, body SetupEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupEnableRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupGetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupGet(ctx context.Context, body SetupGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupGetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupInitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupInitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupInit(ctx context.Context, body SetupInitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupInitRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupSetStepWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupSetStepRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupSetStep(ctx context.Context, body SetupSetStepJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupSetStepRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupSkipStepWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupSkipStepRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupSkipStep(ctx context.Context, body SetupSkipStepJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupSkipStepRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupSkipAllWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupSkipAllRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupSkipAll(ctx context.Context, body SetupSkipAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupSkipAllRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewSetupDisableRequest calls the generic SetupDisable builder with application/json body
func NewSetupDisableRequest(server string, body SetupDisableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetupDisableRequestWithBody(server, "application/json", bodyReader)
}

// NewSetupDisableRequestWithBody generates requests for SetupDisable with any type of body
func NewSetupDisableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setup/disable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetupEnableRequest calls the generic SetupEnable builder with application/json body
func NewSetupEnableRequest(server string, body SetupEnableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetupEnableRequestWithBody(server, "application/json", bodyReader)
}

// NewSetupEnableRequestWithBody generates requests for SetupEnable with any type of body
func NewSetupEnableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setup/enable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetupGetRequest calls the generic SetupGet builder with application/json body
func NewSetupGetRequest(server string, body SetupGetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetupGetRequestWithBody(server, "application/json", bodyReader)
}

// NewSetupGetRequestWithBody generates requests for SetupGet with any type of body
func NewSetupGetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setup/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetupInitRequest calls the generic SetupInit builder with application/json body
func NewSetupInitRequest(server string, body SetupInitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetupInitRequestWithBody(server, "application/json", bodyReader)
}

// NewSetupInitRequestWithBody generates requests for SetupInit with any type of body
func NewSetupInitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setup/init")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetupSetStepRequest calls the generic SetupSetStep builder with application/json body
func NewSetupSetStepRequest(server string, body SetupSetStepJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetupSetStepRequestWithBody(server, "application/json", bodyReader)
}

// NewSetupSetStepRequestWithBody generates requests for SetupSetStep with any type of body
func NewSetupSetStepRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setup/setStep")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetupSkipStepRequest calls the generic SetupSkipStep builder with application/json body
func NewSetupSkipStepRequest(server string, body SetupSkipStepJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetupSkipStepRequestWithBody(server, "application/json", bodyReader)
}

// NewSetupSkipStepRequestWithBody generates requests for SetupSkipStep with any type of body
func NewSetupSkipStepRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setup/skip")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetupSkipAllRequest calls the generic SetupSkipAll builder with application/json body
func NewSetupSkipAllRequest(server string, body SetupSkipAllJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetupSkipAllRequestWithBody(server, "application/json", bodyReader)
}

// NewSetupSkipAllRequestWithBody generates requests for SetupSkipAll with any type of body
func NewSetupSkipAllRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setup/skipAll")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// SetupDisableWithBodyWithResponse request with any body
	SetupDisableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetupDisableResponse, error)

	SetupDisableWithResponse(ctx context.Context, body SetupDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*SetupDisableResponse, error)

	// SetupEnableWithBodyWithResponse request with any body
	SetupEnableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetupEnableResponse, error)

	SetupEnableWithResponse(ctx context.Context, body SetupEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*SetupEnableResponse, error)

	// SetupGetWithBodyWithResponse request with any body
	SetupGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetupGetResponse, error)

	SetupGetWithResponse(ctx context.Context, body SetupGetJSONRequestBody, reqEditors ...RequestEditorFn) (*SetupGetResponse, error)

	// SetupInitWithBodyWithResponse request with any body
	SetupInitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetupInitResponse, error)

	SetupInitWithResponse(ctx context.Context, body SetupInitJSONRequestBody, reqEditors ...RequestEditorFn) (*SetupInitResponse, error)

	// SetupSetStepWithBodyWithResponse request with any body
	SetupSetStepWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetupSetStepResponse, error)

	SetupSetStepWithResponse(ctx context.Context, body SetupSetStepJSONRequestBody, reqEditors ...RequestEditorFn) (*SetupSetStepResponse, error)

	// SetupSkipStepWithBodyWithResponse request with any body
	SetupSkipStepWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetupSkipStepResponse, error)

	SetupSkipStepWithResponse(ctx context.Context, body SetupSkipStepJSONRequestBody, reqEditors ...RequestEditorFn) (*SetupSkipStepResponse, error)

	// SetupSkipAllWithBodyWithResponse request with any body
	SetupSkipAllWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetupSkipAllResponse, error)

	SetupSkipAllWithResponse(ctx context.Context, body SetupSkipAllJSONRequestBody, reqEditors ...RequestEditorFn) (*SetupSkipAllResponse, error)
}

type SetupDisableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result SetupProgress `json:"result"`

		// Status Status code for successful operations
		Status float32 `json:"status"`
	}
	JSON400 *struct {
		Error ProtocolError `json:"error"`

		// Status Status code for error operations
		Status float32 `json:"status"`
	}
}

// Status returns HTTPResponse.Status
func (r SetupDisableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetupDisableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetupEnableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result SetupProgress `json:"result"`

		// Status Status code for successful operations
		Status float32 `json:"status"`
	}
	JSON400 *struct {
		Error ProtocolError `json:"error"`

		// Status Status code for error operations
		Status float32 `json:"status"`
	}
}

// Status returns HTTPResponse.Status
func (r SetupEnableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetupEnableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetupGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result SetupProgress `json:"result"`

		// Status Status code for successful operations
		Status float32 `json:"status"`
	}
	JSON400 *struct {
		Error ProtocolError `json:"error"`

		// Status Status code for error operations
		Status float32 `json:"status"`
	}
}

// Status returns HTTPResponse.Status
func (r SetupGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetupGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetupInitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result SetupProgress `json:"result"`

		// Status Status code for successful operations
		Status float32 `json:"status"`
	}
	JSON400 *struct {
		Error ProtocolError `json:"error"`

		// Status Status code for error operations
		Status float32 `json:"status"`
	}
}

// Status returns HTTPResponse.Status
func (r SetupInitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetupInitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetupSetStepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result SetupProgress `json:"result"`

		// Status Status code for successful operations
		Status float32 `json:"status"`
	}
	JSON400 *struct {
		Error ProtocolError `json:"error"`

		// Status Status code for error operations
		Status float32 `json:"status"`
	}
}

// Status returns HTTPResponse.Status
func (r SetupSetStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetupSetStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetupSkipStepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result SetupProgress `json:"result"`

		// Status Status code for successful operations
		Status float32 `json:"status"`
	}
	JSON400 *struct {
		Error ProtocolError `json:"error"`

		// Status Status code for error operations
		Status float32 `json:"status"`
	}
}

// Status returns HTTPResponse.Status
func (r SetupSkipStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetupSkipStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetupSkipAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result SetupProgress `json:"result"`

		// Status Status code for successful operations
		Status float32 `json:"status"`
	}
	JSON400 *struct {
		Error ProtocolError `json:"error"`

		// Status Status code for error operations
		Status float32 `json:"status"`
	}
}

// Status returns HTTPResponse.Status
func (r SetupSkipAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetupSkipAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// SetupDisableWithBodyWithResponse request with arbitrary body returning *SetupDisableResponse
func (c *ClientWithResponses) SetupDisableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetupDisableResponse, error) {
	rsp, err := c.SetupDisableWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetupDisableResponse(rsp)
}

func (c *ClientWithResponses) SetupDisableWithResponse(ctx context.Context, body SetupDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*SetupDisableResponse, error) {
	rsp, err := c.SetupDisable(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetupDisableResponse(rsp)
}

// SetupEnableWithBodyWithResponse request with arbitrary body returning *SetupEnableResponse
func (c *ClientWithResponses) SetupEnableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetupEnableResponse, error) {
	rsp, err := c.SetupEnableWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetupEnableResponse(rsp)
}

func (c *ClientWithResponses) SetupEnableWithResponse(ctx context.Context, body SetupEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*SetupEnableResponse, error) {
	rsp, err := c.SetupEnable(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetupEnableResponse(rsp)
}

// SetupGetWithBodyWithResponse request with arbitrary body returning *SetupGetResponse
func (c *ClientWithResponses) SetupGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetupGetResponse, error) {
	rsp, err := c.SetupGetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetupGetResponse(rsp)
}

func (c *ClientWithResponses) SetupGetWithResponse(ctx context.Context, body SetupGetJSONRequestBody, reqEditors ...RequestEditorFn) (*SetupGetResponse, error) {
	rsp, err := c.SetupGet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetupGetResponse(rsp)
}

// SetupInitWithBodyWithResponse request with arbitrary body returning *SetupInitResponse
func (c *ClientWithResponses) SetupInitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetupInitResponse, error) {
	rsp, err := c.SetupInitWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetupInitResponse(rsp)
}

func (c *ClientWithResponses) SetupInitWithResponse(ctx context.Context, body SetupInitJSONRequestBody, reqEditors ...RequestEditorFn) (*SetupInitResponse, error) {
	rsp, err := c.SetupInit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetupInitResponse(rsp)
}

// SetupSetStepWithBodyWithResponse request with arbitrary body returning *SetupSetStepResponse
func (c *ClientWithResponses) SetupSetStepWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetupSetStepResponse, error) {
	rsp, err := c.SetupSetStepWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetupSetStepResponse(rsp)
}

func (c *ClientWithResponses) SetupSetStepWithResponse(ctx context.Context, body SetupSetStepJSONRequestBody, reqEditors ...RequestEditorFn) (*SetupSetStepResponse, error) {
	rsp, err := c.SetupSetStep(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetupSetStepResponse(rsp)
}

// SetupSkipStepWithBodyWithResponse request with arbitrary body returning *SetupSkipStepResponse
func (c *ClientWithResponses) SetupSkipStepWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetupSkipStepResponse, error) {
	rsp, err := c.SetupSkipStepWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetupSkipStepResponse(rsp)
}

func (c *ClientWithResponses) SetupSkipStepWithResponse(ctx context.Context, body SetupSkipStepJSONRequestBody, reqEditors ...RequestEditorFn) (*SetupSkipStepResponse, error) {
	rsp, err := c.SetupSkipStep(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetupSkipStepResponse(rsp)
}

// SetupSkipAllWithBodyWithResponse request with arbitrary body returning *SetupSkipAllResponse
func (c *ClientWithResponses) SetupSkipAllWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetupSkipAllResponse, error) {
	rsp, err := c.SetupSkipAllWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetupSkipAllResponse(rsp)
}

func (c *ClientWithResponses) SetupSkipAllWithResponse(ctx context.Context, body SetupSkipAllJSONRequestBody, reqEditors ...RequestEditorFn) (*SetupSkipAllResponse, error) {
	rsp, err := c.SetupSkipAll(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetupSkipAllResponse(rsp)
}

// ParseSetupDisableResponse parses an HTTP response from a SetupDisableWithResponse call
func ParseSetupDisableResponse(rsp *http.Response) (*SetupDisableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetupDisableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result SetupProgress `json:"result"`

			// Status Status code for successful operations
			Status float32 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error ProtocolError `json:"error"`

			// Status Status code for error operations
			Status float32 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSetupEnableResponse parses an HTTP response from a SetupEnableWithResponse call
func ParseSetupEnableResponse(rsp *http.Response) (*SetupEnableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetupEnableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result SetupProgress `json:"result"`

			// Status Status code for successful operations
			Status float32 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error ProtocolError `json:"error"`

			// Status Status code for error operations
			Status float32 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSetupGetResponse parses an HTTP response from a SetupGetWithResponse call
func ParseSetupGetResponse(rsp *http.Response) (*SetupGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetupGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result SetupProgress `json:"result"`

			// Status Status code for successful operations
			Status float32 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error ProtocolError `json:"error"`

			// Status Status code for error operations
			Status float32 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSetupInitResponse parses an HTTP response from a SetupInitWithResponse call
func ParseSetupInitResponse(rsp *http.Response) (*SetupInitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetupInitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result SetupProgress `json:"result"`

			// Status Status code for successful operations
			Status float32 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error ProtocolError `json:"error"`

			// Status Status code for error operations
			Status float32 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSetupSetStepResponse parses an HTTP response from a SetupSetStepWithResponse call
func ParseSetupSetStepResponse(rsp *http.Response) (*SetupSetStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetupSetStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result SetupProgress `json:"result"`

			// Status Status code for successful operations
			Status float32 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error ProtocolError `json:"error"`

			// Status Status code for error operations
			Status float32 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSetupSkipStepResponse parses an HTTP response from a SetupSkipStepWithResponse call
func ParseSetupSkipStepResponse(rsp *http.Response) (*SetupSkipStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetupSkipStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result SetupProgress `json:"result"`

			// Status Status code for successful operations
			Status float32 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error ProtocolError `json:"error"`

			// Status Status code for error operations
			Status float32 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSetupSkipAllResponse parses an HTTP response from a SetupSkipAllWithResponse call
func ParseSetupSkipAllResponse(rsp *http.Response) (*SetupSkipAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetupSkipAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result SetupProgress `json:"result"`

			// Status Status code for successful operations
			Status float32 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error ProtocolError `json:"error"`

			// Status Status code for error operations
			Status float32 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}
