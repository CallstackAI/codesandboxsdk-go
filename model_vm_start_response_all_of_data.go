/*
CodeSandbox API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-07-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csdkgo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VMStartResponseAllOfData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMStartResponseAllOfData{}

// VMStartResponseAllOfData struct for VMStartResponseAllOfData
type VMStartResponseAllOfData struct {
	BootupType string `json:"bootup_type"`
	Cluster string `json:"cluster"`
	Id string `json:"id"`
	LatestPitcherVersion string `json:"latest_pitcher_version"`
	PitcherManagerVersion string `json:"pitcher_manager_version"`
	PitcherToken string `json:"pitcher_token"`
	PitcherUrl string `json:"pitcher_url"`
	PitcherVersion string `json:"pitcher_version"`
	ReconnectToken string `json:"reconnect_token"`
	UserWorkspacePath string `json:"user_workspace_path"`
	WorkspacePath string `json:"workspace_path"`
}

type _VMStartResponseAllOfData VMStartResponseAllOfData

// NewVMStartResponseAllOfData instantiates a new VMStartResponseAllOfData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMStartResponseAllOfData(bootupType string, cluster string, id string, latestPitcherVersion string, pitcherManagerVersion string, pitcherToken string, pitcherUrl string, pitcherVersion string, reconnectToken string, userWorkspacePath string, workspacePath string) *VMStartResponseAllOfData {
	this := VMStartResponseAllOfData{}
	this.BootupType = bootupType
	this.Cluster = cluster
	this.Id = id
	this.LatestPitcherVersion = latestPitcherVersion
	this.PitcherManagerVersion = pitcherManagerVersion
	this.PitcherToken = pitcherToken
	this.PitcherUrl = pitcherUrl
	this.PitcherVersion = pitcherVersion
	this.ReconnectToken = reconnectToken
	this.UserWorkspacePath = userWorkspacePath
	this.WorkspacePath = workspacePath
	return &this
}

// NewVMStartResponseAllOfDataWithDefaults instantiates a new VMStartResponseAllOfData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMStartResponseAllOfDataWithDefaults() *VMStartResponseAllOfData {
	this := VMStartResponseAllOfData{}
	return &this
}

// GetBootupType returns the BootupType field value
func (o *VMStartResponseAllOfData) GetBootupType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BootupType
}

// GetBootupTypeOk returns a tuple with the BootupType field value
// and a boolean to check if the value has been set.
func (o *VMStartResponseAllOfData) GetBootupTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BootupType, true
}

// SetBootupType sets field value
func (o *VMStartResponseAllOfData) SetBootupType(v string) {
	o.BootupType = v
}

// GetCluster returns the Cluster field value
func (o *VMStartResponseAllOfData) GetCluster() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *VMStartResponseAllOfData) GetClusterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *VMStartResponseAllOfData) SetCluster(v string) {
	o.Cluster = v
}

// GetId returns the Id field value
func (o *VMStartResponseAllOfData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VMStartResponseAllOfData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VMStartResponseAllOfData) SetId(v string) {
	o.Id = v
}

// GetLatestPitcherVersion returns the LatestPitcherVersion field value
func (o *VMStartResponseAllOfData) GetLatestPitcherVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LatestPitcherVersion
}

// GetLatestPitcherVersionOk returns a tuple with the LatestPitcherVersion field value
// and a boolean to check if the value has been set.
func (o *VMStartResponseAllOfData) GetLatestPitcherVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LatestPitcherVersion, true
}

// SetLatestPitcherVersion sets field value
func (o *VMStartResponseAllOfData) SetLatestPitcherVersion(v string) {
	o.LatestPitcherVersion = v
}

// GetPitcherManagerVersion returns the PitcherManagerVersion field value
func (o *VMStartResponseAllOfData) GetPitcherManagerVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PitcherManagerVersion
}

// GetPitcherManagerVersionOk returns a tuple with the PitcherManagerVersion field value
// and a boolean to check if the value has been set.
func (o *VMStartResponseAllOfData) GetPitcherManagerVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PitcherManagerVersion, true
}

// SetPitcherManagerVersion sets field value
func (o *VMStartResponseAllOfData) SetPitcherManagerVersion(v string) {
	o.PitcherManagerVersion = v
}

// GetPitcherToken returns the PitcherToken field value
func (o *VMStartResponseAllOfData) GetPitcherToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PitcherToken
}

// GetPitcherTokenOk returns a tuple with the PitcherToken field value
// and a boolean to check if the value has been set.
func (o *VMStartResponseAllOfData) GetPitcherTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PitcherToken, true
}

// SetPitcherToken sets field value
func (o *VMStartResponseAllOfData) SetPitcherToken(v string) {
	o.PitcherToken = v
}

// GetPitcherUrl returns the PitcherUrl field value
func (o *VMStartResponseAllOfData) GetPitcherUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PitcherUrl
}

// GetPitcherUrlOk returns a tuple with the PitcherUrl field value
// and a boolean to check if the value has been set.
func (o *VMStartResponseAllOfData) GetPitcherUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PitcherUrl, true
}

// SetPitcherUrl sets field value
func (o *VMStartResponseAllOfData) SetPitcherUrl(v string) {
	o.PitcherUrl = v
}

// GetPitcherVersion returns the PitcherVersion field value
func (o *VMStartResponseAllOfData) GetPitcherVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PitcherVersion
}

// GetPitcherVersionOk returns a tuple with the PitcherVersion field value
// and a boolean to check if the value has been set.
func (o *VMStartResponseAllOfData) GetPitcherVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PitcherVersion, true
}

// SetPitcherVersion sets field value
func (o *VMStartResponseAllOfData) SetPitcherVersion(v string) {
	o.PitcherVersion = v
}

// GetReconnectToken returns the ReconnectToken field value
func (o *VMStartResponseAllOfData) GetReconnectToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReconnectToken
}

// GetReconnectTokenOk returns a tuple with the ReconnectToken field value
// and a boolean to check if the value has been set.
func (o *VMStartResponseAllOfData) GetReconnectTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReconnectToken, true
}

// SetReconnectToken sets field value
func (o *VMStartResponseAllOfData) SetReconnectToken(v string) {
	o.ReconnectToken = v
}

// GetUserWorkspacePath returns the UserWorkspacePath field value
func (o *VMStartResponseAllOfData) GetUserWorkspacePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserWorkspacePath
}

// GetUserWorkspacePathOk returns a tuple with the UserWorkspacePath field value
// and a boolean to check if the value has been set.
func (o *VMStartResponseAllOfData) GetUserWorkspacePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserWorkspacePath, true
}

// SetUserWorkspacePath sets field value
func (o *VMStartResponseAllOfData) SetUserWorkspacePath(v string) {
	o.UserWorkspacePath = v
}

// GetWorkspacePath returns the WorkspacePath field value
func (o *VMStartResponseAllOfData) GetWorkspacePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkspacePath
}

// GetWorkspacePathOk returns a tuple with the WorkspacePath field value
// and a boolean to check if the value has been set.
func (o *VMStartResponseAllOfData) GetWorkspacePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkspacePath, true
}

// SetWorkspacePath sets field value
func (o *VMStartResponseAllOfData) SetWorkspacePath(v string) {
	o.WorkspacePath = v
}

func (o VMStartResponseAllOfData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMStartResponseAllOfData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bootup_type"] = o.BootupType
	toSerialize["cluster"] = o.Cluster
	toSerialize["id"] = o.Id
	toSerialize["latest_pitcher_version"] = o.LatestPitcherVersion
	toSerialize["pitcher_manager_version"] = o.PitcherManagerVersion
	toSerialize["pitcher_token"] = o.PitcherToken
	toSerialize["pitcher_url"] = o.PitcherUrl
	toSerialize["pitcher_version"] = o.PitcherVersion
	toSerialize["reconnect_token"] = o.ReconnectToken
	toSerialize["user_workspace_path"] = o.UserWorkspacePath
	toSerialize["workspace_path"] = o.WorkspacePath
	return toSerialize, nil
}

func (o *VMStartResponseAllOfData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bootup_type",
		"cluster",
		"id",
		"latest_pitcher_version",
		"pitcher_manager_version",
		"pitcher_token",
		"pitcher_url",
		"pitcher_version",
		"reconnect_token",
		"user_workspace_path",
		"workspace_path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVMStartResponseAllOfData := _VMStartResponseAllOfData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVMStartResponseAllOfData)

	if err != nil {
		return err
	}

	*o = VMStartResponseAllOfData(varVMStartResponseAllOfData)

	return err
}

type NullableVMStartResponseAllOfData struct {
	value *VMStartResponseAllOfData
	isSet bool
}

func (v NullableVMStartResponseAllOfData) Get() *VMStartResponseAllOfData {
	return v.value
}

func (v *NullableVMStartResponseAllOfData) Set(val *VMStartResponseAllOfData) {
	v.value = val
	v.isSet = true
}

func (v NullableVMStartResponseAllOfData) IsSet() bool {
	return v.isSet
}

func (v *NullableVMStartResponseAllOfData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMStartResponseAllOfData(val *VMStartResponseAllOfData) *NullableVMStartResponseAllOfData {
	return &NullableVMStartResponseAllOfData{value: val, isSet: true}
}

func (v NullableVMStartResponseAllOfData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMStartResponseAllOfData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


