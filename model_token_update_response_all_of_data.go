/*
CodeSandbox API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-07-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csdkgo

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TokenUpdateResponseAllOfData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenUpdateResponseAllOfData{}

// TokenUpdateResponseAllOfData struct for TokenUpdateResponseAllOfData
type TokenUpdateResponseAllOfData struct {
	Description NullableString `json:"description"`
	ExpiresAt NullableTime `json:"expires_at,omitempty"`
	Scopes []string `json:"scopes"`
	TeamId string `json:"team_id"`
	TokenId string `json:"token_id"`
}

type _TokenUpdateResponseAllOfData TokenUpdateResponseAllOfData

// NewTokenUpdateResponseAllOfData instantiates a new TokenUpdateResponseAllOfData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenUpdateResponseAllOfData(description NullableString, scopes []string, teamId string, tokenId string) *TokenUpdateResponseAllOfData {
	this := TokenUpdateResponseAllOfData{}
	this.Description = description
	this.Scopes = scopes
	this.TeamId = teamId
	this.TokenId = tokenId
	return &this
}

// NewTokenUpdateResponseAllOfDataWithDefaults instantiates a new TokenUpdateResponseAllOfData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenUpdateResponseAllOfDataWithDefaults() *TokenUpdateResponseAllOfData {
	this := TokenUpdateResponseAllOfData{}
	return &this
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TokenUpdateResponseAllOfData) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenUpdateResponseAllOfData) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *TokenUpdateResponseAllOfData) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenUpdateResponseAllOfData) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt.Get()
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenUpdateResponseAllOfData) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiresAt.Get(), o.ExpiresAt.IsSet()
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *TokenUpdateResponseAllOfData) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt.IsSet() {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given NullableTime and assigns it to the ExpiresAt field.
func (o *TokenUpdateResponseAllOfData) SetExpiresAt(v time.Time) {
	o.ExpiresAt.Set(&v)
}
// SetExpiresAtNil sets the value for ExpiresAt to be an explicit nil
func (o *TokenUpdateResponseAllOfData) SetExpiresAtNil() {
	o.ExpiresAt.Set(nil)
}

// UnsetExpiresAt ensures that no value is present for ExpiresAt, not even an explicit nil
func (o *TokenUpdateResponseAllOfData) UnsetExpiresAt() {
	o.ExpiresAt.Unset()
}

// GetScopes returns the Scopes field value
func (o *TokenUpdateResponseAllOfData) GetScopes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
func (o *TokenUpdateResponseAllOfData) GetScopesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scopes, true
}

// SetScopes sets field value
func (o *TokenUpdateResponseAllOfData) SetScopes(v []string) {
	o.Scopes = v
}

// GetTeamId returns the TeamId field value
func (o *TokenUpdateResponseAllOfData) GetTeamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value
// and a boolean to check if the value has been set.
func (o *TokenUpdateResponseAllOfData) GetTeamIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamId, true
}

// SetTeamId sets field value
func (o *TokenUpdateResponseAllOfData) SetTeamId(v string) {
	o.TeamId = v
}

// GetTokenId returns the TokenId field value
func (o *TokenUpdateResponseAllOfData) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *TokenUpdateResponseAllOfData) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *TokenUpdateResponseAllOfData) SetTokenId(v string) {
	o.TokenId = v
}

func (o TokenUpdateResponseAllOfData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenUpdateResponseAllOfData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description.Get()
	if o.ExpiresAt.IsSet() {
		toSerialize["expires_at"] = o.ExpiresAt.Get()
	}
	toSerialize["scopes"] = o.Scopes
	toSerialize["team_id"] = o.TeamId
	toSerialize["token_id"] = o.TokenId
	return toSerialize, nil
}

func (o *TokenUpdateResponseAllOfData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"scopes",
		"team_id",
		"token_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenUpdateResponseAllOfData := _TokenUpdateResponseAllOfData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenUpdateResponseAllOfData)

	if err != nil {
		return err
	}

	*o = TokenUpdateResponseAllOfData(varTokenUpdateResponseAllOfData)

	return err
}

type NullableTokenUpdateResponseAllOfData struct {
	value *TokenUpdateResponseAllOfData
	isSet bool
}

func (v NullableTokenUpdateResponseAllOfData) Get() *TokenUpdateResponseAllOfData {
	return v.value
}

func (v *NullableTokenUpdateResponseAllOfData) Set(val *TokenUpdateResponseAllOfData) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenUpdateResponseAllOfData) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenUpdateResponseAllOfData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenUpdateResponseAllOfData(val *TokenUpdateResponseAllOfData) *NullableTokenUpdateResponseAllOfData {
	return &NullableTokenUpdateResponseAllOfData{value: val, isSet: true}
}

func (v NullableTokenUpdateResponseAllOfData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenUpdateResponseAllOfData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


