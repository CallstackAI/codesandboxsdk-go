/*
CodeSandbox API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-07-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csdkgo

import (
	"encoding/json"
)

// checks if the SandboxForkRequestStartOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SandboxForkRequestStartOptions{}

// SandboxForkRequestStartOptions Optional VM start configuration. If provided, the sandbox VM will be started immediately after creation.
type SandboxForkRequestStartOptions struct {
	// The time in seconds after which the VM will hibernate due to inactivity. Must be a positive integer between 1 and 86400 (24 hours). Defaults to 300 seconds (5 minutes) if not specified. 
	HibernationTimeoutSeconds *int32 `json:"hibernation_timeout_seconds,omitempty"`
	// This determines in which cluster, closest to the given country the VM will be started in. The format is ISO-3166-1 alpha-2. If not set, the VM will be started closest to the caller of this API. This will only be applied when a VM is run for the first time, and will only serve as a hint (e.g. if the template of this sandbox runs in EU cluster, this sandbox will also run in the EU cluster).
	Ipcountry *string `json:"ipcountry,omitempty" validate:"regexp=^[A-Z]{2}$"`
	// Determines which specs to start the VM with. If not specified, the VM will start with the default specs for the workspace.  You can only specify a VM tier when starting a VM that is inside your workspace. Specifying a VM tier for someone else's sandbox will return an error.  Not all tiers will be available depending on the workspace subscription status, and higher tiers incur higher costs. Please see codesandbox.io/pricing for details on specs and costs. 
	Tier *string `json:"tier,omitempty"`
}

// NewSandboxForkRequestStartOptions instantiates a new SandboxForkRequestStartOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSandboxForkRequestStartOptions() *SandboxForkRequestStartOptions {
	this := SandboxForkRequestStartOptions{}
	return &this
}

// NewSandboxForkRequestStartOptionsWithDefaults instantiates a new SandboxForkRequestStartOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSandboxForkRequestStartOptionsWithDefaults() *SandboxForkRequestStartOptions {
	this := SandboxForkRequestStartOptions{}
	return &this
}

// GetHibernationTimeoutSeconds returns the HibernationTimeoutSeconds field value if set, zero value otherwise.
func (o *SandboxForkRequestStartOptions) GetHibernationTimeoutSeconds() int32 {
	if o == nil || IsNil(o.HibernationTimeoutSeconds) {
		var ret int32
		return ret
	}
	return *o.HibernationTimeoutSeconds
}

// GetHibernationTimeoutSecondsOk returns a tuple with the HibernationTimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxForkRequestStartOptions) GetHibernationTimeoutSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.HibernationTimeoutSeconds) {
		return nil, false
	}
	return o.HibernationTimeoutSeconds, true
}

// HasHibernationTimeoutSeconds returns a boolean if a field has been set.
func (o *SandboxForkRequestStartOptions) HasHibernationTimeoutSeconds() bool {
	if o != nil && !IsNil(o.HibernationTimeoutSeconds) {
		return true
	}

	return false
}

// SetHibernationTimeoutSeconds gets a reference to the given int32 and assigns it to the HibernationTimeoutSeconds field.
func (o *SandboxForkRequestStartOptions) SetHibernationTimeoutSeconds(v int32) {
	o.HibernationTimeoutSeconds = &v
}

// GetIpcountry returns the Ipcountry field value if set, zero value otherwise.
func (o *SandboxForkRequestStartOptions) GetIpcountry() string {
	if o == nil || IsNil(o.Ipcountry) {
		var ret string
		return ret
	}
	return *o.Ipcountry
}

// GetIpcountryOk returns a tuple with the Ipcountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxForkRequestStartOptions) GetIpcountryOk() (*string, bool) {
	if o == nil || IsNil(o.Ipcountry) {
		return nil, false
	}
	return o.Ipcountry, true
}

// HasIpcountry returns a boolean if a field has been set.
func (o *SandboxForkRequestStartOptions) HasIpcountry() bool {
	if o != nil && !IsNil(o.Ipcountry) {
		return true
	}

	return false
}

// SetIpcountry gets a reference to the given string and assigns it to the Ipcountry field.
func (o *SandboxForkRequestStartOptions) SetIpcountry(v string) {
	o.Ipcountry = &v
}

// GetTier returns the Tier field value if set, zero value otherwise.
func (o *SandboxForkRequestStartOptions) GetTier() string {
	if o == nil || IsNil(o.Tier) {
		var ret string
		return ret
	}
	return *o.Tier
}

// GetTierOk returns a tuple with the Tier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxForkRequestStartOptions) GetTierOk() (*string, bool) {
	if o == nil || IsNil(o.Tier) {
		return nil, false
	}
	return o.Tier, true
}

// HasTier returns a boolean if a field has been set.
func (o *SandboxForkRequestStartOptions) HasTier() bool {
	if o != nil && !IsNil(o.Tier) {
		return true
	}

	return false
}

// SetTier gets a reference to the given string and assigns it to the Tier field.
func (o *SandboxForkRequestStartOptions) SetTier(v string) {
	o.Tier = &v
}

func (o SandboxForkRequestStartOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SandboxForkRequestStartOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HibernationTimeoutSeconds) {
		toSerialize["hibernation_timeout_seconds"] = o.HibernationTimeoutSeconds
	}
	if !IsNil(o.Ipcountry) {
		toSerialize["ipcountry"] = o.Ipcountry
	}
	if !IsNil(o.Tier) {
		toSerialize["tier"] = o.Tier
	}
	return toSerialize, nil
}

type NullableSandboxForkRequestStartOptions struct {
	value *SandboxForkRequestStartOptions
	isSet bool
}

func (v NullableSandboxForkRequestStartOptions) Get() *SandboxForkRequestStartOptions {
	return v.value
}

func (v *NullableSandboxForkRequestStartOptions) Set(val *SandboxForkRequestStartOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSandboxForkRequestStartOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSandboxForkRequestStartOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSandboxForkRequestStartOptions(val *SandboxForkRequestStartOptions) *NullableSandboxForkRequestStartOptions {
	return &NullableSandboxForkRequestStartOptions{value: val, isSet: true}
}

func (v NullableSandboxForkRequestStartOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSandboxForkRequestStartOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


