/*
CodeSandbox API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-07-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csdkgo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenCreateResponseAllOfData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenCreateResponseAllOfData{}

// TokenCreateResponseAllOfData struct for TokenCreateResponseAllOfData
type TokenCreateResponseAllOfData struct {
	Description NullableString `json:"description"`
	ExpiresAt NullableString `json:"expires_at"`
	Scopes []string `json:"scopes"`
	TeamId string `json:"team_id"`
	Token string `json:"token"`
	TokenId string `json:"token_id"`
}

type _TokenCreateResponseAllOfData TokenCreateResponseAllOfData

// NewTokenCreateResponseAllOfData instantiates a new TokenCreateResponseAllOfData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenCreateResponseAllOfData(description NullableString, expiresAt NullableString, scopes []string, teamId string, token string, tokenId string) *TokenCreateResponseAllOfData {
	this := TokenCreateResponseAllOfData{}
	this.Description = description
	this.ExpiresAt = expiresAt
	this.Scopes = scopes
	this.TeamId = teamId
	this.Token = token
	this.TokenId = tokenId
	return &this
}

// NewTokenCreateResponseAllOfDataWithDefaults instantiates a new TokenCreateResponseAllOfData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenCreateResponseAllOfDataWithDefaults() *TokenCreateResponseAllOfData {
	this := TokenCreateResponseAllOfData{}
	return &this
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TokenCreateResponseAllOfData) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenCreateResponseAllOfData) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *TokenCreateResponseAllOfData) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetExpiresAt returns the ExpiresAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TokenCreateResponseAllOfData) GetExpiresAt() string {
	if o == nil || o.ExpiresAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.ExpiresAt.Get()
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenCreateResponseAllOfData) GetExpiresAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiresAt.Get(), o.ExpiresAt.IsSet()
}

// SetExpiresAt sets field value
func (o *TokenCreateResponseAllOfData) SetExpiresAt(v string) {
	o.ExpiresAt.Set(&v)
}

// GetScopes returns the Scopes field value
func (o *TokenCreateResponseAllOfData) GetScopes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
func (o *TokenCreateResponseAllOfData) GetScopesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scopes, true
}

// SetScopes sets field value
func (o *TokenCreateResponseAllOfData) SetScopes(v []string) {
	o.Scopes = v
}

// GetTeamId returns the TeamId field value
func (o *TokenCreateResponseAllOfData) GetTeamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value
// and a boolean to check if the value has been set.
func (o *TokenCreateResponseAllOfData) GetTeamIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamId, true
}

// SetTeamId sets field value
func (o *TokenCreateResponseAllOfData) SetTeamId(v string) {
	o.TeamId = v
}

// GetToken returns the Token field value
func (o *TokenCreateResponseAllOfData) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *TokenCreateResponseAllOfData) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *TokenCreateResponseAllOfData) SetToken(v string) {
	o.Token = v
}

// GetTokenId returns the TokenId field value
func (o *TokenCreateResponseAllOfData) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *TokenCreateResponseAllOfData) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *TokenCreateResponseAllOfData) SetTokenId(v string) {
	o.TokenId = v
}

func (o TokenCreateResponseAllOfData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenCreateResponseAllOfData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description.Get()
	toSerialize["expires_at"] = o.ExpiresAt.Get()
	toSerialize["scopes"] = o.Scopes
	toSerialize["team_id"] = o.TeamId
	toSerialize["token"] = o.Token
	toSerialize["token_id"] = o.TokenId
	return toSerialize, nil
}

func (o *TokenCreateResponseAllOfData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"expires_at",
		"scopes",
		"team_id",
		"token",
		"token_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenCreateResponseAllOfData := _TokenCreateResponseAllOfData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenCreateResponseAllOfData)

	if err != nil {
		return err
	}

	*o = TokenCreateResponseAllOfData(varTokenCreateResponseAllOfData)

	return err
}

type NullableTokenCreateResponseAllOfData struct {
	value *TokenCreateResponseAllOfData
	isSet bool
}

func (v NullableTokenCreateResponseAllOfData) Get() *TokenCreateResponseAllOfData {
	return v.value
}

func (v *NullableTokenCreateResponseAllOfData) Set(val *TokenCreateResponseAllOfData) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenCreateResponseAllOfData) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenCreateResponseAllOfData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenCreateResponseAllOfData(val *TokenCreateResponseAllOfData) *NullableTokenCreateResponseAllOfData {
	return &NullableTokenCreateResponseAllOfData{value: val, isSet: true}
}

func (v NullableTokenCreateResponseAllOfData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenCreateResponseAllOfData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


