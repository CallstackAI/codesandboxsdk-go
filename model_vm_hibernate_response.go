/*
CodeSandbox API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-07-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csdkgo

import (
	"encoding/json"
)

// checks if the VMHibernateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMHibernateResponse{}

// VMHibernateResponse struct for VMHibernateResponse
type VMHibernateResponse struct {
	Errors []Error8 `json:"errors,omitempty"`
	Success *bool `json:"success,omitempty"`
	Data map[string]interface{} `json:"data,omitempty"`
}

// NewVMHibernateResponse instantiates a new VMHibernateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMHibernateResponse() *VMHibernateResponse {
	this := VMHibernateResponse{}
	return &this
}

// NewVMHibernateResponseWithDefaults instantiates a new VMHibernateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMHibernateResponseWithDefaults() *VMHibernateResponse {
	this := VMHibernateResponse{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *VMHibernateResponse) GetErrors() []Error8 {
	if o == nil || IsNil(o.Errors) {
		var ret []Error8
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMHibernateResponse) GetErrorsOk() ([]Error8, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *VMHibernateResponse) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []Error8 and assigns it to the Errors field.
func (o *VMHibernateResponse) SetErrors(v []Error8) {
	o.Errors = v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *VMHibernateResponse) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMHibernateResponse) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *VMHibernateResponse) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *VMHibernateResponse) SetSuccess(v bool) {
	o.Success = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *VMHibernateResponse) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMHibernateResponse) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *VMHibernateResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *VMHibernateResponse) SetData(v map[string]interface{}) {
	o.Data = v
}

func (o VMHibernateResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMHibernateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableVMHibernateResponse struct {
	value *VMHibernateResponse
	isSet bool
}

func (v NullableVMHibernateResponse) Get() *VMHibernateResponse {
	return v.value
}

func (v *NullableVMHibernateResponse) Set(val *VMHibernateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVMHibernateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVMHibernateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMHibernateResponse(val *VMHibernateResponse) *NullableVMHibernateResponse {
	return &NullableVMHibernateResponse{value: val, isSet: true}
}

func (v NullableVMHibernateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMHibernateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


