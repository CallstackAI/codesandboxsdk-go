/*
CodeSandbox API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-07-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csdkgo

import (
	"encoding/json"
)

// checks if the TokenUpdateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenUpdateResponse{}

// TokenUpdateResponse struct for TokenUpdateResponse
type TokenUpdateResponse struct {
	Errors []Error7 `json:"errors,omitempty"`
	Success *bool `json:"success,omitempty"`
	Data *TokenUpdateResponseAllOfData `json:"data,omitempty"`
}

// NewTokenUpdateResponse instantiates a new TokenUpdateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenUpdateResponse() *TokenUpdateResponse {
	this := TokenUpdateResponse{}
	return &this
}

// NewTokenUpdateResponseWithDefaults instantiates a new TokenUpdateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenUpdateResponseWithDefaults() *TokenUpdateResponse {
	this := TokenUpdateResponse{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *TokenUpdateResponse) GetErrors() []Error7 {
	if o == nil || IsNil(o.Errors) {
		var ret []Error7
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenUpdateResponse) GetErrorsOk() ([]Error7, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *TokenUpdateResponse) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []Error7 and assigns it to the Errors field.
func (o *TokenUpdateResponse) SetErrors(v []Error7) {
	o.Errors = v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *TokenUpdateResponse) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenUpdateResponse) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *TokenUpdateResponse) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *TokenUpdateResponse) SetSuccess(v bool) {
	o.Success = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *TokenUpdateResponse) GetData() TokenUpdateResponseAllOfData {
	if o == nil || IsNil(o.Data) {
		var ret TokenUpdateResponseAllOfData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenUpdateResponse) GetDataOk() (*TokenUpdateResponseAllOfData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *TokenUpdateResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given TokenUpdateResponseAllOfData and assigns it to the Data field.
func (o *TokenUpdateResponse) SetData(v TokenUpdateResponseAllOfData) {
	o.Data = &v
}

func (o TokenUpdateResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenUpdateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableTokenUpdateResponse struct {
	value *TokenUpdateResponse
	isSet bool
}

func (v NullableTokenUpdateResponse) Get() *TokenUpdateResponse {
	return v.value
}

func (v *NullableTokenUpdateResponse) Set(val *TokenUpdateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenUpdateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenUpdateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenUpdateResponse(val *TokenUpdateResponse) *NullableTokenUpdateResponse {
	return &NullableTokenUpdateResponse{value: val, isSet: true}
}

func (v NullableTokenUpdateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenUpdateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


