/*
CodeSandbox API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-07-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csdkgo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MetaInformationAuth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaInformationAuth{}

// MetaInformationAuth Meta information about the current authentication context
type MetaInformationAuth struct {
	Scopes []string `json:"scopes"`
	Team NullableString `json:"team"`
	Version string `json:"version"`
}

type _MetaInformationAuth MetaInformationAuth

// NewMetaInformationAuth instantiates a new MetaInformationAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaInformationAuth(scopes []string, team NullableString, version string) *MetaInformationAuth {
	this := MetaInformationAuth{}
	this.Scopes = scopes
	this.Team = team
	this.Version = version
	return &this
}

// NewMetaInformationAuthWithDefaults instantiates a new MetaInformationAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaInformationAuthWithDefaults() *MetaInformationAuth {
	this := MetaInformationAuth{}
	return &this
}

// GetScopes returns the Scopes field value
func (o *MetaInformationAuth) GetScopes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
func (o *MetaInformationAuth) GetScopesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scopes, true
}

// SetScopes sets field value
func (o *MetaInformationAuth) SetScopes(v []string) {
	o.Scopes = v
}

// GetTeam returns the Team field value
// If the value is explicit nil, the zero value for string will be returned
func (o *MetaInformationAuth) GetTeam() string {
	if o == nil || o.Team.Get() == nil {
		var ret string
		return ret
	}

	return *o.Team.Get()
}

// GetTeamOk returns a tuple with the Team field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetaInformationAuth) GetTeamOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Team.Get(), o.Team.IsSet()
}

// SetTeam sets field value
func (o *MetaInformationAuth) SetTeam(v string) {
	o.Team.Set(&v)
}

// GetVersion returns the Version field value
func (o *MetaInformationAuth) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *MetaInformationAuth) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *MetaInformationAuth) SetVersion(v string) {
	o.Version = v
}

func (o MetaInformationAuth) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaInformationAuth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["scopes"] = o.Scopes
	toSerialize["team"] = o.Team.Get()
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *MetaInformationAuth) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"scopes",
		"team",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetaInformationAuth := _MetaInformationAuth{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetaInformationAuth)

	if err != nil {
		return err
	}

	*o = MetaInformationAuth(varMetaInformationAuth)

	return err
}

type NullableMetaInformationAuth struct {
	value *MetaInformationAuth
	isSet bool
}

func (v NullableMetaInformationAuth) Get() *MetaInformationAuth {
	return v.value
}

func (v *NullableMetaInformationAuth) Set(val *MetaInformationAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaInformationAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaInformationAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaInformationAuth(val *MetaInformationAuth) *NullableMetaInformationAuth {
	return &NullableMetaInformationAuth{value: val, isSet: true}
}

func (v NullableMetaInformationAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaInformationAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


