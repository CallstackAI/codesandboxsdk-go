/*
CodeSandbox API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-07-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csdkgo

import (
	"encoding/json"
	"time"
)

// checks if the TokenUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenUpdateRequest{}

// TokenUpdateRequest Updateable fields for API Tokens. Omitting a field will not update it; explicitly passing null or an empty list will clear the value.
type TokenUpdateRequest struct {
	// API Version to use, formatted as YYYY-MM-DD
	DefaultVersion NullableString `json:"default_version,omitempty"`
	// Description of this token, for instance where it will be used.
	Description NullableString `json:"description,omitempty"`
	// Expiry time of this token. Cannot be set in the past, and cannot be changed for tokens that have already expired. Pass null to make this token never expire.
	ExpiresAt NullableTime `json:"expires_at,omitempty"`
	// Which scopes to grant this token. The given scopes will replace the current scopes, revoking any that are no longer present in the list.
	Scopes []string `json:"scopes,omitempty"`
}

// NewTokenUpdateRequest instantiates a new TokenUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenUpdateRequest() *TokenUpdateRequest {
	this := TokenUpdateRequest{}
	return &this
}

// NewTokenUpdateRequestWithDefaults instantiates a new TokenUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenUpdateRequestWithDefaults() *TokenUpdateRequest {
	this := TokenUpdateRequest{}
	return &this
}

// GetDefaultVersion returns the DefaultVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenUpdateRequest) GetDefaultVersion() string {
	if o == nil || IsNil(o.DefaultVersion.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultVersion.Get()
}

// GetDefaultVersionOk returns a tuple with the DefaultVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenUpdateRequest) GetDefaultVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultVersion.Get(), o.DefaultVersion.IsSet()
}

// HasDefaultVersion returns a boolean if a field has been set.
func (o *TokenUpdateRequest) HasDefaultVersion() bool {
	if o != nil && o.DefaultVersion.IsSet() {
		return true
	}

	return false
}

// SetDefaultVersion gets a reference to the given NullableString and assigns it to the DefaultVersion field.
func (o *TokenUpdateRequest) SetDefaultVersion(v string) {
	o.DefaultVersion.Set(&v)
}
// SetDefaultVersionNil sets the value for DefaultVersion to be an explicit nil
func (o *TokenUpdateRequest) SetDefaultVersionNil() {
	o.DefaultVersion.Set(nil)
}

// UnsetDefaultVersion ensures that no value is present for DefaultVersion, not even an explicit nil
func (o *TokenUpdateRequest) UnsetDefaultVersion() {
	o.DefaultVersion.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenUpdateRequest) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenUpdateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *TokenUpdateRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *TokenUpdateRequest) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *TokenUpdateRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *TokenUpdateRequest) UnsetDescription() {
	o.Description.Unset()
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenUpdateRequest) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt.Get()
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenUpdateRequest) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiresAt.Get(), o.ExpiresAt.IsSet()
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *TokenUpdateRequest) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt.IsSet() {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given NullableTime and assigns it to the ExpiresAt field.
func (o *TokenUpdateRequest) SetExpiresAt(v time.Time) {
	o.ExpiresAt.Set(&v)
}
// SetExpiresAtNil sets the value for ExpiresAt to be an explicit nil
func (o *TokenUpdateRequest) SetExpiresAtNil() {
	o.ExpiresAt.Set(nil)
}

// UnsetExpiresAt ensures that no value is present for ExpiresAt, not even an explicit nil
func (o *TokenUpdateRequest) UnsetExpiresAt() {
	o.ExpiresAt.Unset()
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *TokenUpdateRequest) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenUpdateRequest) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *TokenUpdateRequest) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *TokenUpdateRequest) SetScopes(v []string) {
	o.Scopes = v
}

func (o TokenUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultVersion.IsSet() {
		toSerialize["default_version"] = o.DefaultVersion.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.ExpiresAt.IsSet() {
		toSerialize["expires_at"] = o.ExpiresAt.Get()
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	return toSerialize, nil
}

type NullableTokenUpdateRequest struct {
	value *TokenUpdateRequest
	isSet bool
}

func (v NullableTokenUpdateRequest) Get() *TokenUpdateRequest {
	return v.value
}

func (v *NullableTokenUpdateRequest) Set(val *TokenUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenUpdateRequest(val *TokenUpdateRequest) *NullableTokenUpdateRequest {
	return &NullableTokenUpdateRequest{value: val, isSet: true}
}

func (v NullableTokenUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


